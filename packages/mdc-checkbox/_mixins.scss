//
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@import "@material/animation/functions";
@import "@material/ripple/mixins";
@import "@material/rtl/mixins";
@import "./functions";
@import "./variables";

//
// Public
//

@mixin mdc-checkbox-stroke-color($color) {
  @include mdc-theme-prop(border-color, $color);
}

@mixin mdc-checkbox-container-color($color) {
  @include mdc-theme-prop(background-color, $color);
}

@mixin mdc-checkbox-ink-color($color) {
  // !important is needed here because a stroke must be set as an attribute on the SVG in order
  // for line animation to work properly.
  @include mdc-theme-prop(stroke, $color, $important: true);
}

@mixin mdc-checkbox-ripple($ripple-config) {
  // TODO(acdvorak): Is this selector necessary? If so, does it belong here, or in mdc-checkbox.scss?
  &:not(.mdc-checkbox--disabled) {
    @include mdc-ripple-base;
    @include mdc-ripple-bg(map-merge((pseudo: "::before"), $ripple-config));
    @include mdc-ripple-fg(map-merge((pseudo: "::after"), $ripple-config));
  }
}

@mixin mdc-checkbox-color($color) {
  $ripple-config: (base-color: $color);

  // TODO(acdvorak): Refactor ripple mixin to do this @if check automatically, or use mdc-theme-prop()
  @if (map-has-key($mdc-theme-property-values, $color)) {
    $ripple-config: (theme-style: $color);
  }

  @include mdc-checkbox-ripple(map-merge($ripple-config, (opacity: .14)));

  &.mdc-checkbox--anim {
    $uid: mdc-checkbox-keyframes-color-uid();

    @include mdc-checkbox-keyframes-color($color, $uid);

    &-unchecked-checked,
    &-unchecked-indeterminate {
      .mdc-checkbox__background {
        animation-name: mdc-checkbox-fade-in-background-#{$uid};

        @include mdc-theme-dark(".mdc-checkbox") {
          animation-name: mdc-checkbox-fade-in-background-dark-#{$uid};
        }
      }
    }

    &-checked-unchecked,
    &-indeterminate-unchecked {
      .mdc-checkbox__background {
        animation-name: mdc-checkbox-fade-out-background-#{$uid};

        @include mdc-theme-dark(".mdc-checkbox") {
          animation-name: mdc-checkbox-fade-out-background-dark-#{$uid};
        }
      }
    }
  }

  .mdc-checkbox__native-control:not(:disabled):checked ~ .mdc-checkbox__background,
  .mdc-checkbox__native-control:not(:disabled):indeterminate ~ .mdc-checkbox__background {
    @include mdc-checkbox-stroke-color($color);
    @include mdc-checkbox-container-color($color);
  }

  .mdc-checkbox__native-control:not(:disabled) ~ .mdc-checkbox__background::before {
    @include mdc-checkbox-container-color($color);
  }
}

//
// Private
//

@mixin mdc-checkbox-base_ {
  display: inline-block;
  position: relative;
  flex: 0 0 $mdc-checkbox-size;
  box-sizing: content-box;
  width: $mdc-checkbox-size;
  height: $mdc-checkbox-size;
  padding: ($mdc-checkbox-touch-area - $mdc-checkbox-size) / 2;
  line-height: 0;
  white-space: nowrap;
  cursor: pointer;
  vertical-align: bottom;

  // TODO(acdvorak): Should pseudo-element selectors go in mdc-checkbox.scss?
  &::before,
  &::after {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin mdc-checkbox-cover-parent_ {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

// Background

@mixin mdc-checkbox__background_ {
  @include mdc-checkbox-cover-parent_;
  @include mdc-rtl-reflexive-position(
    left, ($mdc-checkbox-touch-area - $mdc-checkbox-size) / 2, ".mdc-checkbox");

  display: inline-flex;
  top: ($mdc-checkbox-touch-area - $mdc-checkbox-size) / 2;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  width: $mdc-checkbox-ui-pct;
  height: $mdc-checkbox-ui-pct;
  transition:
    mdc-checkbox-transition-exit(background-color),
    mdc-checkbox-transition-exit(border-color);
  border: $mdc-checkbox-border-width solid currentColor; // Color is overridden by the mdc-checkbox-stroke-color() mixin
  border-radius: 2px;
  background-color: transparent;
  pointer-events: none;
  will-change: background-color, border-color;
}

@mixin mdc-checkbox__background--filled_ {
  // TODO(acdvorak): Refactoring into mixins breaks the clear relationship between transitions properties and color properties.
  // E.g., "Why are we transitioning border-color and background-color here?" Answer: Because that's what the color mixins use.
  transition:
    mdc-checkbox-transition-enter(border-color),
    mdc-checkbox-transition-enter(background-color);
}

// Background focus indicator

@mixin mdc-checkbox__focus-indicator_ {
  @include mdc-checkbox-cover-parent_;

  width: 100%;
  height: 100%;
  transform: scale(0, 0);
  transition: mdc-checkbox-transition-exit(opacity), mdc-checkbox-transition-exit(transform);
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
  will-change: opacity, transform;
}

@mixin mdc-checkbox__focus-indicator--focused_ {
  transform: scale(2.75, 2.75);
  transition:
    mdc-checkbox-transition-enter(opacity, 0ms, 80ms),
    mdc-checkbox-transition-enter(transform, 0ms, 80ms);
  opacity: .26;
}

@mixin mdc-checkbox__focus-indicator--ripple-upgraded-unbounded_ {
  content: none;
}

// Native input

@mixin mdc-checkbox__native-control_ {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  opacity: 0;
  cursor: inherit;
}

// Check mark

@mixin mdc-checkbox__checkmark_ {
  @include mdc-checkbox-cover-parent_;

  width: 100%;
  transition: mdc-checkbox-transition-exit(opacity, 0ms, $mdc-checkbox-transition-duration * 2);
  opacity: 0;
}

@mixin mdc-checkbox__checkmark--checked_ {
  transition:
    mdc-checkbox-transition-enter(opacity, 0ms, $mdc-checkbox-transition-duration * 2),
    mdc-checkbox-transition-enter(transform, 0ms, $mdc-checkbox-transition-duration * 2);
  opacity: 1;
}

@mixin mdc-checkbox__checkmark--indeterminate_ {
  transform: rotate(45deg);
  transition:
    mdc-checkbox-transition-exit(opacity, 0ms, $mdc-checkbox-transition-duration),
    mdc-checkbox-transition-exit(transform, 0ms, $mdc-checkbox-transition-duration);
  opacity: 0;
}

// Check mark path

@mixin mdc-checkbox__checkmark__path_ {
  transition:
    mdc-checkbox-transition-exit(
      stroke-dashoffset,
      0ms,
      $mdc-checkbox-transition-duration * 2
    );
  stroke-width: $mdc-checkbox-mark-stroke-size * 1.3;
  stroke-dashoffset: $mdc-checkbox-mark-path-length_;
  stroke-dasharray: $mdc-checkbox-mark-path-length_;
}

@mixin mdc-checkbox__checkmark__path--filled_ {
  stroke-dashoffset: 0;
}

// Mixed mark

@mixin mdc-checkbox__mixedmark_ {
  width: 100%;
  height: floor($mdc-checkbox-mark-stroke-size);
  transform: scaleX(0) rotate(0deg);
  transition: mdc-checkbox-transition-exit(opacity), mdc-checkbox-transition-exit(transform);
  opacity: 0;
}

@mixin mdc-checkbox__mixedmark--checked_ {
  transform: scaleX(1) rotate(-45deg);
}

@mixin mdc-checkbox__mixedmark--indeterminate_ {
  transform: scaleX(1) rotate(0deg);
  opacity: 1;
}
